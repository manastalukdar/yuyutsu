import 'package:drift/drift.dart';

import 'book_dao.dart';
import 'bookmark_dao.dart';
import 'reading_progress_dao.dart';

// Conditional imports for different platforms
import 'database_connection_io.dart' 
  if (dart.library.html) 'database_connection_web.dart';

part 'database.g.dart';

// Define tables
class Books extends Table {
  TextColumn get id => text()();
  TextColumn get title => text()();
  TextColumn get author => text()();
  TextColumn get description => text().nullable()();
  TextColumn get filePath => text()();
  TextColumn get format => text()();
  TextColumn get coverPath => text().nullable()();
  DateTimeColumn get dateAdded => dateTime()();
  DateTimeColumn get lastOpened => dateTime().nullable()();
  IntColumn get totalPages => integer().withDefault(const Constant(0))();
  IntColumn get currentPage => integer().withDefault(const Constant(0))();
  RealColumn get readingProgress => real().withDefault(const Constant(0.0))();
  TextColumn get metadata => text().nullable()();

  @override
  Set<Column> get primaryKey => {id};
}

class Bookmarks extends Table {
  TextColumn get id => text()();
  TextColumn get bookId => text()();
  TextColumn get title => text()();
  TextColumn get note => text().nullable()();
  IntColumn get pageNumber => integer()();
  TextColumn get chapterTitle => text().nullable()();
  TextColumn get selectedText => text().nullable()();
  DateTimeColumn get createdAt => dateTime()();
  DateTimeColumn get updatedAt => dateTime().nullable()();

  @override
  Set<Column> get primaryKey => {id};
}

class ReadingProgresses extends Table {
  TextColumn get bookId => text()();
  IntColumn get currentPage => integer()();
  RealColumn get progress => real()();
  TextColumn get currentChapter => text().nullable()();
  IntColumn get currentParagraph => integer().nullable()();
  DateTimeColumn get lastUpdated => dateTime()();
  IntColumn get totalReadingTimeMinutes => integer().withDefault(const Constant(0))();

  @override
  Set<Column> get primaryKey => {bookId};
}

@DriftDatabase(tables: [Books, Bookmarks, ReadingProgresses], daos: [BookDao, BookmarkDao, ReadingProgressDao])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(openConnection());

  @override
  int get schemaVersion => 1;

  @override
  MigrationStrategy get migration => MigrationStrategy(
    onCreate: (Migrator m) {
      return m.createAll();
    },
  );

  // DAOs are automatically generated by Drift
}